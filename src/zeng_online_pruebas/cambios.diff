diff --git a/src/TODO_this_version b/src/TODO_this_version
index 6713239..c031d37 100644
--- a/src/TODO_this_version
+++ b/src/TODO_this_version
@@ -474,7 +474,6 @@ esa manera si que se podría aumentar el límite sin perjudicar dichas operacion
 *zx desktop activado (junto con background windows)
 *etc...
 
--doble buffer de envio snapshot zeng: sino, con invervalos de 20 ms, peta
-porque zeng_send_snapshot_mem_hexa hay que cambiarlo cuando no este enviando snapshot
+-zeng-online se llamara la variante que usa servidor para juego en red
 
 ---Fin Mejoras---
\ No newline at end of file
diff --git a/src/remote.c b/src/remote.c
index 6031837..6a186f0 100644
--- a/src/remote.c
+++ b/src/remote.c
@@ -3599,7 +3599,9 @@ int remote_assemble(int misocket,char *texto,unsigned int direccion)
 				}
 		return longitud_destino;
 }
+int temp_pendiente_recogido_snap=0;
 
+extern z80_byte *temp_obtener_buffer(int *longitud);
 
 #ifdef EMULATE_VISUALMEM
 
@@ -4438,7 +4440,7 @@ void interpreta_comando(char *comando,int misocket,char *buffer_lectura_socket_a
   }
 
 	else if (!strcmp(comando_sin_parametros,"get-snapshot")) {
-		z80_byte *buffer_temp;
+		/*z80_byte *buffer_temp;
 		buffer_temp=malloc(ZRCP_GET_PUT_SNAPSHOT_MEM); //16 MB es mas que suficiente
 		if (buffer_temp==NULL) cpu_panic("Can not allocate memory for get-snapshot");
 
@@ -4448,13 +4450,34 @@ void interpreta_comando(char *comando,int misocket,char *buffer_lectura_socket_a
   		save_zsf_snapshot_file_mem(NULL,puntero,&longitud);
 
 		//printf ("longitud: %d\n",longitud);
+        */
 
+			//pending_zrcp_put_snapshot_buffer_destino=buffer_destino;
+			//pending_zrcp_put_snapshot_longitud=parametros_recibidos;
+
+        int longitud;
+        z80_byte *origen_mem;
+
+
+        origen_mem=temp_obtener_buffer(&longitud);
+
+        printf("get-snapshot. longitud: %d\n",longitud);
 		int i;
+        int generados=0;
 		for (i=0;i<longitud;i++) {
-			escribir_socket_format(misocket,"%02X",buffer_temp[i]);
+			escribir_socket_format(misocket,"%02X",origen_mem[i]); //OJO! cuidado con esto. como origen_mem no sea un z80_Byte * (y sea por ejemplo char *)
+                //van a enviarse valores negativos del tipo: FFFFFFXX, ocupando mas de 2 caracteres
+                //definir siempre origen_mem como z80_byte *!!!!
+            //printf("%02X",origen_mem[i]);
+            generados +=2;
 		}
 
-	 	free(buffer_temp);
+        temp_conmuta_buffer_activo();
+        temp_pendiente_recogido_snap=0;
+
+        printf("\nfin get-snapshot. longitud=%d generados=%d\n",longitud,generados);
+
+	 	//free(buffer_temp);
 	}
 
 	else if (!strcmp(comando_sin_parametros,"get-stack-backtrace")) {
@@ -4822,7 +4845,14 @@ void interpreta_comando(char *comando,int misocket,char *buffer_lectura_socket_a
 			pending_zrcp_put_snapshot_buffer_destino=buffer_destino;
 			pending_zrcp_put_snapshot_longitud=parametros_recibidos;
 
+            if (!temp_pendiente_recogido_snap) {
+                printf("recibido snapshot de master de longitud %d\n",pending_zrcp_put_snapshot_longitud);
+                temp_guarda_snap_buffer01();
+                temp_pendiente_recogido_snap=1;
+            }
+            else printf("snapshot aun no recogido\n");
 
+            printf("Receiving snapshot from master\n");
 
 		}
 
diff --git a/src/snap_zsf.c b/src/snap_zsf.c
index 3170730..89f8d3e 100644
--- a/src/snap_zsf.c
+++ b/src/snap_zsf.c
@@ -6016,13 +6016,58 @@ void check_pending_zrcp_put_snapshot(void)
   //Aplicar un snapshot que se habia leido por ZRCP. Aqui se llama al final de cada frame de pantalla
 
   if (pending_zrcp_put_snapshot_buffer_destino!=NULL) {
-    debug_printf (VERBOSE_DEBUG,"Putting snapshot coming from ZRCP");
+    /*debug_printf (VERBOSE_DEBUG,"Putting snapshot coming from ZRCP");
 
     load_zsf_snapshot_file_mem(NULL,pending_zrcp_put_snapshot_buffer_destino,pending_zrcp_put_snapshot_longitud,1);
 
     free(pending_zrcp_put_snapshot_buffer_destino);
     pending_zrcp_put_snapshot_buffer_destino=NULL;
+    */
+
+   //Aqui no haremos nada, el server mantiene el snapshot
   }
 
 }
 
+
+z80_byte *temp_buffer0=NULL;
+z80_byte *temp_buffer1=NULL;
+int temp_longitud_buffer0=0;
+int temp_longitud_buffer1=0;
+int buffer_activo=0;
+
+void temp_guarda_snap_buffer01(void)
+{
+
+    if (temp_buffer0==NULL) temp_buffer0=util_malloc(2000000,"Temp assign");
+    if (temp_buffer1==NULL) temp_buffer1=util_malloc(2000000,"Temp assign");
+
+    if (buffer_activo==0) {
+        memcpy(temp_buffer0,pending_zrcp_put_snapshot_buffer_destino,pending_zrcp_put_snapshot_longitud);
+        temp_longitud_buffer0=pending_zrcp_put_snapshot_longitud;
+    }
+    else {
+        memcpy(temp_buffer1,pending_zrcp_put_snapshot_buffer_destino,pending_zrcp_put_snapshot_longitud);
+        temp_longitud_buffer1=pending_zrcp_put_snapshot_longitud;
+    }
+
+    //buffer_activo ^=1;
+}
+
+void temp_conmuta_buffer_activo(void)
+{
+    buffer_activo ^=1;
+}
+
+
+z80_byte *temp_obtener_buffer(int *longitud)
+{
+    if (buffer_activo==0) {
+        *longitud=temp_longitud_buffer0;
+        return temp_buffer0;
+    }
+    else {
+        *longitud=temp_longitud_buffer1;
+        return temp_buffer1;
+    }
+}
diff --git a/src/zeng.c b/src/zeng.c
index 4940fc3..05053bc 100644
--- a/src/zeng.c
+++ b/src/zeng.c
@@ -903,12 +903,97 @@ void zeng_force_reconnect(void)
 
 //Enviar estado actual de la maquina como snapshot a maquina remota
 
+z80_byte *temppp_buffer=NULL;
 
 void zeng_send_snapshot_if_needed(void)
 {
 
 	if (zeng_enabled.v==0) return;
 
+    //Si soy slave, leer snapshot
+    if (!zeng_i_am_master) {
+		contador_envio_snapshot++;
+		//printf ("%d %d\n",contador_envio_snapshot,(contador_envio_snapshot % (50*zeng_segundos_cada_snapshot) ));
+		if (contador_envio_snapshot>=zeng_frames_video_cada_snapshot) {
+            //recibiendo snapshot como slave
+            contador_envio_snapshot=0;
+
+            printf("Recibiendo snapshot como slave\n");
+
+            int indice_socket=zeng_remote_sockets[0];
+
+            if (temppp_buffer==NULL) {
+                temppp_buffer=util_malloc(2000000,"Can not allocate memory for getting snapshot");
+            }
+
+            printf("Leyendo snap\n");
+
+            z_sock_write_string(indice_socket,"get-snapshot\n");
+
+            int posicion_command;
+            int leidos=zsock_read_all_until_command(indice_socket,(z80_byte *)temppp_buffer,2000000,&posicion_command);
+            if (leidos>0) {
+                temppp_buffer[leidos]=0; //fin de texto
+                //printf("Received text (length: %d):\n[\n%s\n]\n",leidos,temppp_buffer);
+            }
+
+
+            printf("posicion command: %d\n",posicion_command);
+
+
+
+            if (leidos<0) {
+                debug_printf(VERBOSE_ERR,"ERROR. Can't read remote prompt: %s",z_sock_get_error(leidos));
+                return;
+            }
+
+
+            if (posicion_command>=0) {
+                temppp_buffer[posicion_command-1]=0; //-1 porque hay el salto de linea de antes
+            }
+            else {
+                //TODO: error recibiendo respuesta, no se tiene command>. mejor no aplicar snap
+            }
+
+            printf("Fin leer snap. longitud: %d\n",leidos);
+
+			char *s=temppp_buffer;
+			int parametros_recibidos=0;
+
+			z80_byte *buffer_destino;
+			buffer_destino=malloc(ZRCP_GET_PUT_SNAPSHOT_MEM*2);
+			if (buffer_destino==NULL) cpu_panic("Can not allocate memory for put-snapshot");
+            z80_byte valor;
+
+			while (*s) {
+				char buffer_valor[4];
+				buffer_valor[0]=s[0];
+				buffer_valor[1]=s[1];
+				buffer_valor[2]='H';
+				buffer_valor[3]=0;
+				//printf ("%s\n",buffer_valor);
+				valor=parse_string_to_number(buffer_valor);
+				//printf ("valor: %d\n",valor);
+
+				buffer_destino[parametros_recibidos++]=valor;
+				//menu_debug_write_mapped_byte(direccion++,valor);
+
+				s++;
+				if (*s) s++;
+			}
+
+			//Enviarlo como snapshot, pero al final de un frame de pantalla
+			//load_zsf_snapshot_file_mem(NULL,buffer_destino,parametros_recibidos);
+
+
+            load_zsf_snapshot_file_mem(NULL,buffer_destino,parametros_recibidos,1);
+
+            free(buffer_destino);
+
+
+        }
+    }
+
 	if (zeng_i_am_master) {
 		contador_envio_snapshot++;
 		//printf ("%d %d\n",contador_envio_snapshot,(contador_envio_snapshot % (50*zeng_segundos_cada_snapshot) ));
