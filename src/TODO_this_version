Para esta version:

--Mejoras

-algun tipo de build que no sea ni linux ni mac ni windows, sino simplemente UNIX_GENERIC o algo similar

-conviene ocultar Wall y Wextra en version estable? puede salir algun warning util solo en version estable? no deberia, son warnings muy especificos

-Botón derecho botones acciones: editar botón superior. Y en dispositivos? Quizá setting…

-Quiza registro DE al volver de rutina de trap load, deberia ser DE -=bytes_leidos


--Fin mejoras


--Errores

-Error: Abrir menú debug cpu con tecla F
Luego pulsar botón salir emulador
Y cierra menus pero no sale

-ZENG soporte para QL. ok aunque no envia teclas extendidas
-ZENG para msx se leen los cursores en destino
-ZENG colecovision no va bien

-revisar en menu_debug_change_registers(void),
//Si lanzo con debug_print ERR, y estamos en modo step, se habilita multitarea, por que?


-archivos de cintas que no se cierran en windows al expulsarlas

-kempston mouse en cursor draw en menu abierto lee en apariencia aleatoriamente

-speech con caracteres con acentos no los envia, los filtra 


-Probar generic message en stdout. Funciona bien?

-Desactivar border hace desaparecer el joystick. Solo en cocoa?

-snapshot ZSF de nextdows, no guarda la parte inferior de pantalla aparentemente

-quiza en threads que no se cancelan en windows (zeng?) agregar llamada a pthread_testcancel();


-al volver de pantalla completa que intente restaurar ventanas si habian abiertas antes de ir a pantalla completa?

--Fin Errores


-Renombrar setting de background windows por multitask windows? O algo así
Debe indicar que se puede dejar ventanas en background pero que también pueden haber múltiples ventanas a la vez 

-Si se cambia el prompt de ZRCP, esperar también ese prompt en ZENG

-Para ZENG con más de 2 pcs:
*1 solo master que pueda enviar snapshots a más de 1 slave. Fácil
*ZRCP que permita más de 1 conexión a la vez, para recibir los eventos de envíos de teclas de los slaves. Aquí por una parte hay que tener semáforos (o no?) al actuar sobre según que partes de ZEsarUX y además lanzar threads aparte ( o fork? ) por cada conexión nueva de cliente ZRCP



-Funciones de utils no deberían involucrar nada del menú


-quiza funcion que espera_no_tecla sin considerar movimiento raton, deberia ser la habitual, y solo en casos concretos
usar la que si considera movimiento raton

 
- ajustar memory zones para zx81: rom deberia ser 8kb. revisar tambien zx80


-A mejorar en Next para próxima versión: Ver TODO_machines, sección Next, en : "A mejorar en Next para próxima versión"

-Compatibilidad de print char trap de numeros (chardetect_rom_compat_numbers.v) para zxuno y otras spectrum. Agregar a tests/printtrap_test.sh



-mejorar hotswap con mas combinaciones de maquina (por ejemplo entre 48k y 48k+, o sea, hotswap entre maquinas de mismo tipo)

-al abrir ventanas por primera vez, la coordenada y debe ser por debajo de los botones superiores

-opcion vaciar papelera al salir

-exolon rzx, si se abre menu, se queda continuamente disparando y agachado (joystick seleccionado: cursor&shift, aunque parece que no importa esto)

-parecido a Recent files, que permita cambiar a directorios recientes

-selector tipo joystick, que sea un desplegable en vez de que haya que ir dando cada vez al enter

-smartload de un pok file

-parpadeos en driver xwindow en zx desktop al moverse por menus

-cacalib, en consola texto pura, parpadeo en menu (y en general en cualquier pixel emulado con brillo)

-driver fbdev en pc , con "zesarux --noconfigfile --vo fbdev > /dev/null". al desactivar border, genera panic. tambien desactivando border

-incorporar ZEsarUX en taskbar (dbus??) de kde, gnome o lo que se pueda

-Ventana con triángulo sierpensky que cuando volumen sea alto, se dibujen píxeles en blanco. Se dibuja 1 pixel en cada frame 
Usar no colores blanco, sino color de tinta normal o otro color del skin si hay volumen alto

Texto fondo tiene que se carácter 255 para que no se redibuje con espacios. O usar un flag de ventana que dice que no tiene que redibujar el texto 


-con daad debug, si hago un cambio de gui style, se activa la opcion de watch en daad debug... quiza no está gestionando bien el overlay??

-paws debug que funcione con aventuras en 128k. Ver manual de paws para esto
-daad no usa 128kb. Aunque hay un nuevo parser de daad (hecho en zxbasic) que si usa 128kb


-Documentación ZEsarUX. Dispositivos que estén en funcionamiento salen en color inverso 

-Modificar ayuda ZX desktop y faq. ZX Desktop se puede extender en vertical tambien...

-Ayuda hablar nuevo comportamiento botón derecho 

-First aid que diga que hay extras de ZEsarUX. Descargables desde menu (si hay ssl) o con tu navegador 

-Opción rpi que baje framedrop por defecto no hacerlo?

-Icono para funcion Poke, Visual Real Tape

-Plus3dos handler: acabar de revisar que funcione con pd765 emulacion off


-Emulación floppy:


EL CONTROLADOR DE DISQUETES NEC 765
http://galia.fc.uaslp.mx/~cantocar/ARQUI_COM_II/LIBRO%20IBM-PC/1206.html


Format:DSK disk image file format - CPCWiki
https://www.cpcwiki.eu/index.php/Format:DSK_disk_image_file_format

More information
https://worldofspectrum.org/faq/reference/diskreference.htm#ZX

Operating Systems Development Series
http://www.brokenthorn.com/Resources/OSDev20.html


http://dunfield.classiccmp.org/r/765.pdf
￼
Quiza un modo mas facil (y menos real) en que cuando pida la cpu leer un byte, se le pase el siguiente del disco. Y otro mas real en que el disco esté "girando" como en real, y el byte que se le pase sea el que corresponda en ese momento (requerira funcion nested core). Algún setting para escoger entre los dos modos?

lectura sectores de floppy debe usar los ids y no offset directo (llamando a traps_plus3dos_getoff_track_sector igual que traps)
Y los ST0, ST1, etc de resultado, deben retornar los que hay en DSK? respuesta del comando es el siguiente sector, etc? o el actual?

-Emulación pcw 8256
Requiere antes floppy

-6128. Requiere antes floppy

-PD765: aparece A: y B: disponibles
con la mascara quitada al buscar sector_id, plus3dos handler fallara con carlos sainz por ejemplo
quiza usar funcion aparte para plus3dos handler, o que mascara sea un parametro (y pd765 siempre use mascara 255)

-mensajes panic con codigo error. Por ejemplo, 0001 out of memory. mas bien seria un tipo de error, porque out of memory
hay muchos tipos: out of memory cargando, out of memory asignando buffer rainbow, etc.
Seria: error message: igual que hay ahora. Y luego clases: 0001 out of memory. 0002 segmentation fault, etc


Test unitario +3 que cargue un disco autoarrancable y espere output concreto

Para debug visual floppy simplificar a 512 bytes por sector. 
Fijar también a 9 sectores?

Para saber la ubicación de cada pista hay que considerar el tamaño de cada pista, que puede cambiar. Por tanto no se puede hacer un cálculo directo sino que hay que recorrer cada una de ellas

Por otra parte, en read data, podemos calcular dicha ubicación con el primer byte y los siguientes solo sumar posición 


-Rqm debe ir a 0 después de haber recibido los parámetros en fase comando:

A menos que se haya enviado un comando ilegal, luego de recibido correctamente el u ́ltimo byte MSR.RQM se pone en “0” y se ingresa en la fase siguiente, definida para cada comando (Transferencia o Resultado).
O sea en fase ejecución se pone a 0

Y se pondrá a 1 en la fase de resultado
En read y write data se pone a 1 antes de recibir/escribir el primer byte del sector

-visualfloppy: circulo grande modificar funcion elipse para corregir punteado

-ZXCPM: falla con error size 0 not supported

-mejorar dsk_extended_get_start_track. se tiene que parecer mas al basico
-rainbow islands:tiene pistas repetidas y otras que no estan

-info: juegos de dinamic por ejemplo usan sectores de 1024 bytes: Megaphoenix, Buggy Ranger, After the war, etc

-Mi función de 3D que use tabla de coseno: hecho. ajustar el tamaño de los widgets que usa: zxvision_widgets_draw_particles_3d_convert

-Browser para ver tablas de pistas y sectores de disco llamando a mismas funciones dsk

-Abrir ventana arbitraria con F. Había función para abrir ventana por nombre?

-Si DSK no esta insertado, que no se intenten usar funciones de disco: ejemplo: no selecciono disco y le doy al "Cargador" del +3, y dara error de dsk
->luego asegurarse que si no hay dsk, no diga que es un +2a y no hay discos a: y b:
Creo que se deberia retornar algo asi como el flag de disk not ready de la pd765 si no está insertado

-articfox: carga pero genera comando invalido. quiza parecido a norte y sur?


-text adventure map: opcion mostrar descripciones. localidad 14 por ejemplo se mezcla

-desde disk info-pistas-sectores, al pulsar en un sector, abrir hex editor con una zona especial que consiste en esa pista
esa zona solo esta activa mientras haya dsk insertado, y al reinsertar/quitar dsk, se pierde

alien storm (erbe)
-sector fisico 0 pista 0. leido desde rom
-inicio juego. read id
-read id de pista 0 sector fisico 1: chrn: 0 0 6 2
-seek a pista 0  (pista de ff57h)
-sense interrupt
-bucle cerrado:
PD765: Reading main status register on pc FF19H: C0H (RQM DIO      )
PD765: Reading main status register on pc FF3AH: C0H (RQM DIO      )
PD765: Reading main status register on pc FEF2H: C0H (RQM DIO      )
espera D0 despues de sense interrupt (en ff38h). o sea, 
DB4         FDC Busy            CB          A read or write command is in process. FDC will not accept any other command

otro D0h
luego 80h



-Buscando sector ID 01H on track 1 estamos en pos sector 0
Found sector ID 01H on track 1 at pos sector 0
Found sector ID 01H on track 1 at offset in DSK: 1700H
REAL sector size: 6144
PD765: Returning ST0: 00H ()
PD765: Returning ST1: 20H -> Data error
PD765: Returning ST2: 60H -> Data error, Control Mark. control mark... gestion diferente?
PD765: Returning C: 01H
PD765: Returning H: 00H
PD765: Returning R: 02H
PD765: Returning N: 02H

Parece que lee 3584 bytes de ese sector y el resto aunque lo lee lo ignora, no lo guarda

quiza st0 incorrecto! quiza deberia ser abnormal termination D7=0 D6=1. aun asi, con esto, se comporta igual

luego:

---PD765: SENSE INTERRUPT STATUS command
PD765: Reading main status register on pc FF19H: D0H (RQM DIO  CB    )
PD765: Reading main status register on pc FF3AH: D0H (RQM DIO  CB    )
PD765: Read command on pc FF46H
PD765: Returning ST0: 00H ()
PD765: Reading main status register on pc FF3AH: D0H (RQM DIO  CB    )
PD765: Read command on pc FF46H
PD765: Returning PCN: 01H
PD765: Reading main status register on pc FF3AH: 80H (RQM       )
PD765: Reading main status register on pc FEF2H: 80H (RQM       )
PD765: Write command on pc FEFDH: 07H
PD765: Byte command: 07H
---PD765: RECALIBRATE command

sense interrupt

seek 1

repite!

Buscando sector ID 01H on track 1 estamos en pos sector 0
Found sector ID 01H on track 1 at pos sector 0
Found sector ID 01H on track 1 at offset in DSK: 1700H
REAL sector size: 6144
PD765: Returning ST0: 00H ()
PD765: Returning ST1: 20H
PD765: Returning ST2: 60H
PD765: Returning C: 01H
PD765: Returning H: 00H
PD765: Returning R: 02H
PD765: Returning N: 02H


-comand 4c read deleted data implementar


-Gauntlet 2:

---PD765: SEEK command
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 00H
PD765: Receiving command parameters. Index=1
PD765: Receiving command parameters for SEEK
PD765: HD=0H US1=0H US0=0H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 01H
PD765: Receiving command parameters. Index=2
PD765: Receiving command parameters for SEEK
PD765: NCN=1H
....

PD765: Write command on pc FEF8H: 46H
PD765: Byte command: 46H
---PD765: READ DATA command. MT=0 MF=1 SK=0. Current track: 01H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 00H
PD765: Receiving command parameters. Index=1
PD765: Receiving command parameters for READ DATA
PD765: HD=0H US1=0H US0=0H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 01H
PD765: Receiving command parameters. Index=2
PD765: Receiving command parameters for READ DATA
PD765: C=1H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 00H
PD765: Receiving command parameters. Index=3
PD765: Receiving command parameters for READ DATA
PD765: H=0H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 11H
PD765: Receiving command parameters. Index=4
PD765: Receiving command parameters for READ DATA
PD765: R=11H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 02H
PD765: Receiving command parameters. Index=5
PD765: Receiving command parameters for READ DATA
PD765: N=2H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 18H
PD765: Receiving command parameters. Index=6
PD765: Receiving command parameters for READ DATA
PD765: EOT=18H
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: 2AH
PD765: Receiving command parameters. Index=7
PD765: Receiving command parameters for READ DATA
PD765: GPL=2AH
PD765: Reading main status register on pc FEEDH: 80H (RQM       )
PD765: Write command on pc FEF8H: FFH
PD765: Receiving command parameters. Index=8
PD765: Receiving command parameters for READ DATA
PD765: DTL=FFH
PD765: End command parameters for READ_DATA
Inicio pista 1: 1400H
Total sectors: 8
Buscando sector ID 11H on track 1 estamos en pos sector 0
Found sector ID 11H on track 1 at pos sector 0
Found sector ID 11H on track 1 at offset in DSK: 1500H
REAL sector size: 512
PD765: Returning ST0: 00H ()
PD765: Returning ST1: 00H
PD765: Returning ST2: 00H
PD765: Returning C: 01H
PD765: Returning H: 00H
PD765: Returning R: 12H
PD765: Returning N: 02H
PD765: Reading main status register on pc FF05H: B0H (RQM  EXM CB    )
PD765: Reading main status register on pc FF05H: B0H (RQM  EXM CB    )
PD765: Reading main status register on pc FF05H: B0H (RQM  EXM CB    )
PD765: Reading main status register on pc FF05H: B0H (RQM  EXM CB    )
PD765: Reading main status register on pc FF05H: B0H (RQM  EXM CB    )



---PD765: READ DELETED DATA command. MT=0 MF=1 SK=0. Current track: 01H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: 00H
PD765: Receiving command parameters. Index=1
PD765: Receiving command parameters for READ DATA
PD765: HD=0H US1=0H US0=0H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: 01H
PD765: Receiving command parameters. Index=2
PD765: Receiving command parameters for READ DATA
PD765: C=1H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: 00H
PD765: Receiving command parameters. Index=3
PD765: Receiving command parameters for READ DATA
PD765: H=0H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: E1H
PD765: Receiving command parameters. Index=4
PD765: Receiving command parameters for READ DATA
PD765: R=E1H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: 02H
PD765: Receiving command parameters. Index=5
PD765: Receiving command parameters for READ DATA
PD765: N=2H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: E1H
PD765: Receiving command parameters. Index=6
PD765: Receiving command parameters for READ DATA
PD765: EOT=E1H
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: 2AH
PD765: Receiving command parameters. Index=7
PD765: Receiving command parameters for READ DATA
PD765: GPL=2AH
PD765: Reading main status register on pc FE2AH: 80H (RQM       )
PD765: Write command on pc FE36H: FFH
PD765: Receiving command parameters. Index=8
PD765: Receiving command parameters for READ DATA
PD765: DTL=FFH
PD765: End command parameters for READ_DATA
Inicio pista 1: 1400H
Total sectors: 9
Buscando sector ID E1H on track 1 estamos en pos sector 0
Found sector ID E1H on track 1 at pos sector 0
Found sector ID E1H on track 1 at offset in DSK: 1500H
REAL sector size: 512
PD765: Returning ST0: 00H ()
PD765: Returning ST1: 00H
PD765: Returning ST2: 40H
PD765: Returning C: 01H
PD765: Returning H: 00H
PD765: Returning R: E2H
PD765: Returning N: 02H
PD765: Reading main status register on pc FE5DH: F0H (RQM DIO EXM CB    )
PD765: Read command on pc FE58H



chase hq2

---PD765: READ DELETED DATA command. MT=0 MF=1 SK=0. Current track: 00H













PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 00H
PD765: Receiving command parameters. Index=1
PD765: Receiving command parameters for READ DATA
PD765: HD=0H US1=0H US0=0H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 00H
PD765: Receiving command parameters. Index=2
PD765: Receiving command parameters for READ DATA
PD765: C=0H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 00H
PD765: Receiving command parameters. Index=3
PD765: Receiving command parameters for READ DATA
PD765: H=0H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 07H
PD765: Receiving command parameters. Index=4
PD765: Receiving command parameters for READ DATA
PD765: R=7H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 02H
PD765: Receiving command parameters. Index=5
PD765: Receiving command parameters for READ DATA
PD765: N=2H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 07H
PD765: Receiving command parameters. Index=6
PD765: Receiving command parameters for READ DATA
PD765: EOT=7H
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: 2AH
PD765: Receiving command parameters. Index=7
PD765: Receiving command parameters for READ DATA
PD765: GPL=2AH
PD765: Reading main status register on pc 211CH: 80H (RQM       )
PD765: Write command on pc 2126H: FFH
PD765: Receiving command parameters. Index=8
PD765: Receiving command parameters for READ DATA
PD765: DTL=FFH
PD765: End command parameters for READ_DATA
Inicio pista 0: 100H
Total sectors: 9
Buscando sector ID 07H on track 0 estamos en pos sector 0
Buscando sector ID 07H on track 0 estamos en pos sector 1
Buscando sector ID 07H on track 0 estamos en pos sector 2
Buscando sector ID 07H on track 0 estamos en pos sector 3
Buscando sector ID 07H on track 0 estamos en pos sector 4
Buscando sector ID 07H on track 0 estamos en pos sector 5
Found sector ID 07H on track 0 at pos sector 5
Found sector ID 07H on track 0 at offset in DSK: C00H
REAL sector size: 512
PD765: Returning ST0: 00H ()
PD765: Returning ST1: 00H
PD765: Returning ST2: 40H
PD765: Returning C: 00H
